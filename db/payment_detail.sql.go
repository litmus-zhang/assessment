// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment_detail.sql

package db

import (
	"context"
)

const createPaymentDetail = `-- name: CreatePaymentDetail :one
INSERT INTO payment_details (account_name, account_number, bank_name, company_id) VALUES ($1, $2, $3, $4) RETURNING id, account_name, account_number, bank_name, company_id, created_at
`

type CreatePaymentDetailParams struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	BankName      string `json:"bank_name"`
	CompanyID     int64  `json:"company_id"`
}

func (q *Queries) CreatePaymentDetail(ctx context.Context, arg CreatePaymentDetailParams) (PaymentDetail, error) {
	row := q.db.QueryRowContext(ctx, createPaymentDetail,
		arg.AccountName,
		arg.AccountNumber,
		arg.BankName,
		arg.CompanyID,
	)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePaymentDetail = `-- name: DeletePaymentDetail :exec
DELETE FROM payment_details WHERE id = $1 AND company_id = $2 RETURNING id, account_name, account_number, bank_name, company_id, created_at
`

type DeletePaymentDetailParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) DeletePaymentDetail(ctx context.Context, arg DeletePaymentDetailParams) error {
	_, err := q.db.ExecContext(ctx, deletePaymentDetail, arg.ID, arg.CompanyID)
	return err
}

const getACompanyPaymentDetailByID = `-- name: GetACompanyPaymentDetailByID :one
SELECT id, account_name, account_number, bank_name, company_id, created_at FROM payment_details WHERE id = $1 AND company_id = $2
LIMIT 1
`

type GetACompanyPaymentDetailByIDParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) GetACompanyPaymentDetailByID(ctx context.Context, arg GetACompanyPaymentDetailByIDParams) (PaymentDetail, error) {
	row := q.db.QueryRowContext(ctx, getACompanyPaymentDetailByID, arg.ID, arg.CompanyID)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const listAllCompanyPaymentDetails = `-- name: ListAllCompanyPaymentDetails :many
SELECT id, account_name, account_number, bank_name, company_id, created_at FROM payment_details WHERE company_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAllCompanyPaymentDetailsParams struct {
	CompanyID int64 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListAllCompanyPaymentDetails(ctx context.Context, arg ListAllCompanyPaymentDetailsParams) ([]PaymentDetail, error) {
	rows, err := q.db.QueryContext(ctx, listAllCompanyPaymentDetails, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentDetail{}
	for rows.Next() {
		var i PaymentDetail
		if err := rows.Scan(
			&i.ID,
			&i.AccountName,
			&i.AccountNumber,
			&i.BankName,
			&i.CompanyID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentDetail = `-- name: UpdatePaymentDetail :one
UPDATE payment_details SET account_name = $1, account_number = $2, bank_name = $3 WHERE id = $4 AND company_id = $5 RETURNING id, account_name, account_number, bank_name, company_id, created_at
`

type UpdatePaymentDetailParams struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	BankName      string `json:"bank_name"`
	ID            int64  `json:"id"`
	CompanyID     int64  `json:"company_id"`
}

func (q *Queries) UpdatePaymentDetail(ctx context.Context, arg UpdatePaymentDetailParams) (PaymentDetail, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentDetail,
		arg.AccountName,
		arg.AccountNumber,
		arg.BankName,
		arg.ID,
		arg.CompanyID,
	)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}
