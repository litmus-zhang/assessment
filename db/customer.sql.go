// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (first_name, last_name, email, phone_number, company_id, address) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, first_name, last_name, email, phone_number, address, company_id, created_at
`

type CreateCustomerParams struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       string         `json:"email"`
	PhoneNumber string         `json:"phone_number"`
	CompanyID   int64          `json:"company_id"`
	Address     sql.NullString `json:"address"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.CompanyID,
		arg.Address,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE id = $1 AND company_id = $2 RETURNING id, first_name, last_name, email, phone_number, address, company_id, created_at
`

type DeleteCustomerParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) DeleteCustomer(ctx context.Context, arg DeleteCustomerParams) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, arg.ID, arg.CompanyID)
	return err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, first_name, last_name, email, phone_number, address, company_id, created_at FROM customers WHERE email = $1 AND company_id = $2
LIMIT 1
`

type GetCustomerByEmailParams struct {
	Email     string `json:"email"`
	CompanyID int64  `json:"company_id"`
}

func (q *Queries) GetCustomerByEmail(ctx context.Context, arg GetCustomerByEmailParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByEmail, arg.Email, arg.CompanyID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, first_name, last_name, email, phone_number, address, company_id, created_at FROM customers WHERE id = $1 AND company_id = $2
LIMIT 1
`

type GetCustomerByIDParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) GetCustomerByID(ctx context.Context, arg GetCustomerByIDParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, arg.ID, arg.CompanyID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, first_name, last_name, email, phone_number, address, company_id, created_at FROM customers WHERE company_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListCustomersParams struct {
	CompanyID int64 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.CompanyID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers SET first_name = $1, last_name = $2, email = $3, phone_number = $4, address = $7 WHERE id = $5 AND company_id = $6 RETURNING id, first_name, last_name, email, phone_number, address, company_id, created_at
`

type UpdateCustomerParams struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       string         `json:"email"`
	PhoneNumber string         `json:"phone_number"`
	ID          int64          `json:"id"`
	CompanyID   int64          `json:"company_id"`
	Address     sql.NullString `json:"address"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.ID,
		arg.CompanyID,
		arg.Address,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}
