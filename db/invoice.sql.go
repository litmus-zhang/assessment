// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invoice.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices ( customer_id ,name, due_date, status, company_id, note, discount ) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, customer_id, name, amount, due_date, status, company_id, note, discount, updated_at, created_at
`

type CreateInvoiceParams struct {
	CustomerID int64          `json:"customer_id"`
	Name       string         `json:"name"`
	DueDate    time.Time      `json:"due_date"`
	Status     string         `json:"status"`
	CompanyID  int64          `json:"company_id"`
	Note       sql.NullString `json:"note"`
	Discount   string         `json:"discount"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.CustomerID,
		arg.Name,
		arg.DueDate,
		arg.Status,
		arg.CompanyID,
		arg.Note,
		arg.Discount,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Name,
		&i.Amount,
		&i.DueDate,
		&i.Status,
		&i.CompanyID,
		&i.Note,
		&i.Discount,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices WHERE id = $1 AND company_id =$2
`

type DeleteInvoiceParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) DeleteInvoice(ctx context.Context, arg DeleteInvoiceParams) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, arg.ID, arg.CompanyID)
	return err
}

const getAllInvoices = `-- name: GetAllInvoices :many
SELECT id, customer_id, name, amount, due_date, status, company_id, note, discount, updated_at, created_at FROM invoices WHERE company_id = $1 ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetAllInvoicesParams struct {
	CompanyID int64 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetAllInvoices(ctx context.Context, arg GetAllInvoicesParams) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvoices, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Name,
			&i.Amount,
			&i.DueDate,
			&i.Status,
			&i.CompanyID,
			&i.Note,
			&i.Discount,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyInvoiceSummary = `-- name: GetCompanyInvoiceSummary :many
SELECT 
    status, 
    COUNT(*) AS count,
    CAST(SUM(amount) AS numeric) AS total_amount
FROM 
    invoices
WHERE 
    company_id = $1
GROUP BY 
    status
`

type GetCompanyInvoiceSummaryRow struct {
	Status      string `json:"status"`
	Count       int64  `json:"count"`
	TotalAmount string `json:"total_amount"`
}

func (q *Queries) GetCompanyInvoiceSummary(ctx context.Context, companyID int64) ([]GetCompanyInvoiceSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyInvoiceSummary, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCompanyInvoiceSummaryRow{}
	for rows.Next() {
		var i GetCompanyInvoiceSummaryRow
		if err := rows.Scan(&i.Status, &i.Count, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoiceTotalFromItems = `-- name: GetInvoiceTotalFromItems :exec
UPDATE invoices
SET amount = (
    SELECT 
        CAST(SUM(total_price) AS numeric)
    FROM
        items
    WHERE
        invoice_id = $1
)
WHERE id = $1
`

func (q *Queries) GetInvoiceTotalFromItems(ctx context.Context, invoiceID int64) error {
	_, err := q.db.ExecContext(ctx, getInvoiceTotalFromItems, invoiceID)
	return err
}

const getInvoicesByStatus = `-- name: GetInvoicesByStatus :many
SELECT id, customer_id, name, amount, due_date, status, company_id, note, discount, updated_at, created_at FROM invoices WHERE status = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetInvoicesByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetInvoicesByStatus(ctx context.Context, arg GetInvoicesByStatusParams) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, getInvoicesByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Name,
			&i.Amount,
			&i.DueDate,
			&i.Status,
			&i.CompanyID,
			&i.Note,
			&i.Discount,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneInvoice = `-- name: GetOneInvoice :one
SELECT id, customer_id, name, amount, due_date, status, company_id, note, discount, updated_at, created_at FROM invoices WHERE id = $1 AND company_id =$2
LIMIT 1
`

type GetOneInvoiceParams struct {
	ID        int64 `json:"id"`
	CompanyID int64 `json:"company_id"`
}

func (q *Queries) GetOneInvoice(ctx context.Context, arg GetOneInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getOneInvoice, arg.ID, arg.CompanyID)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Name,
		&i.Amount,
		&i.DueDate,
		&i.Status,
		&i.CompanyID,
		&i.Note,
		&i.Discount,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateInvoice = `-- name: UpdateInvoice :one
UPDATE invoices SET name = $2, due_date = $3, status = $4, note = $5, discount = $6 WHERE id = $1 AND company_id =$7 RETURNING id, customer_id, name, amount, due_date, status, company_id, note, discount, updated_at, created_at
`

type UpdateInvoiceParams struct {
	ID        int64          `json:"id"`
	Name      string         `json:"name"`
	DueDate   time.Time      `json:"due_date"`
	Status    string         `json:"status"`
	Note      sql.NullString `json:"note"`
	Discount  string         `json:"discount"`
	CompanyID int64          `json:"company_id"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoice,
		arg.ID,
		arg.Name,
		arg.DueDate,
		arg.Status,
		arg.Note,
		arg.Discount,
		arg.CompanyID,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Name,
		&i.Amount,
		&i.DueDate,
		&i.Status,
		&i.CompanyID,
		&i.Note,
		&i.Discount,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
