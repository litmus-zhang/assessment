// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: item.sql

package db

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items ( name, unit_price, description, invoice_id, quantity) 
VALUES ($1, $2, $3, $4, $5) RETURNING id, invoice_id, name, description, quantity, unit_price, total_price
`

type CreateItemParams struct {
	Name        string `json:"name"`
	UnitPrice   string `json:"unit_price"`
	Description string `json:"description"`
	InvoiceID   int64  `json:"invoice_id"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.Name,
		arg.UnitPrice,
		arg.Description,
		arg.InvoiceID,
		arg.Quantity,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Name,
		&i.Description,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getAlltemsForAnInvoice = `-- name: GetAlltemsForAnInvoice :many
SELECT id, invoice_id, name, description, quantity, unit_price, total_price FROM items WHERE invoice_id = $1
LIMIT $2 OFFSET $3
`

type GetAlltemsForAnInvoiceParams struct {
	InvoiceID int64 `json:"invoice_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetAlltemsForAnInvoice(ctx context.Context, arg GetAlltemsForAnInvoiceParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getAlltemsForAnInvoice, arg.InvoiceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.Name,
			&i.Description,
			&i.Quantity,
			&i.UnitPrice,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items SET name = $2, unit_price = $3, quantity=$4  WHERE id = $1 AND invoice_id =$5 RETURNING id, invoice_id, name, description, quantity, unit_price, total_price
`

type UpdateItemParams struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	UnitPrice string `json:"unit_price"`
	Quantity  int32  `json:"quantity"`
	InvoiceID int64  `json:"invoice_id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.ID,
		arg.Name,
		arg.UnitPrice,
		arg.Quantity,
		arg.InvoiceID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Name,
		&i.Description,
		&i.Quantity,
		&i.UnitPrice,
		&i.TotalPrice,
	)
	return i, err
}
